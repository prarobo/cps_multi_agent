#! /usr/bin/env python
#
# Support module generated by PAGE version 4.3.2
# In conjunction with Tcl version 8.6
#    Nov 19, 2014 12:43:36 PM


import sys
sys.path.append("../src")
sys.path.append("../fsa") 

from cpsFsmIndividual import fsmIndiv
from cpsFsmTurnProduct import fsmTurnProduct
import numpy as np
from cpsFsmLabelFunctions import *
import colorsys
import cPickle as pickle
import tkFileDialog

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global spinbox
    spinbox = StringVar()
    return


def init(top, gui, arg=None):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    return

def destroy_window ():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
    return

class guiState(object):
    def __init__(self):
        '''Constructor'''
        self.currState = None
        self.currMove = None
        self.xSqSide = 0
        self.ySqSide = 0
        self.arenaDimensions = None
        self.canvasWidth = 0
        self.canvasHeight = 0
        self.robotDot = None
        self.envDot = None
        self.robotPos = None
        self.envPos = None
        self.gameStateLabels = None
        self.filename = None
        self.agentColor = None
        self.labelColor = None
        self.labelIndex = None
        self.stateLabels = None
        self.maxMove = None
        self.numLabels = None
        return
    
    def selectFileCallback(self):
        filename = tkFileDialog.askopenfilename(initialdir="../game_runs" )
        if filename:
            self.gameLog = pickle.load( open(filename, "rb") )
            
            self.stateLabels = self.gameLog['stateLabels']
            self.arenaDimensions = self.gameLog['arenaDimensions']
            self.actionLog = self.gameLog['actionLog']
            self.stateLog = self.gameLog['stateLog']
            self.agentColor = self.gameLog['agentColor']
            self.labelColor = self.gameLog['labelColor']
            self.labelIndex = self.gameLog['labelIndex']
            self.labelDisplayExcl = self.gameLog['labelDisplayExcl']
            self.numLabels = self.gameLog['numLabels']
            self.maxMove = len(self.stateLog)-1
            self.filename = filename
            self.currMove = 0
            
            w.txtOutput.delete(1.0, END)
            self.redrawAll()
        
        return
    
    def interpretStateID(self, stateID):
        '''Break state ID into meaningful components'''
        
        stateID = stateID.split('_')
        envPos = [[int(x) for x in stateID[1]]]
        robotPos = [[int(x) for x in i] for i in [stateID[3], stateID[5]]]
        
        return robotPos, envPos
        
    def prevCallback(self):
        if self.filename:
            self.currMove = max([0,self.currMove-1])
            self.redrawAll()
        return
               
    def nextCallback(self):
        if self.filename:
            self.currMove = min([self.maxMove,self.currMove+1])
            self.redrawAll()
        return
    
    def redrawAll(self):
        global w
        self.currState = self.stateLog[self.currMove]
        self.robotPos, self.envPos = self.interpretStateID(self.currState)
        
        self.drawGrid()
        self.redrawDots()
        self.redrawLabelDots()
        root.update_idletasks()
        return

    def drawGrid(self):
        '''Draw arena grid'''
        global w, root
        w.canvasBoard.delete(ALL)
        
        self.canvasWidth = float(root.winfo_width())*0.52
        self.canvasHeight = float(root.winfo_height())*0.91
        
        self.xSqSide = self.canvasWidth/self.arenaDimensions[0]
        self.ySqSide = self.canvasHeight/self.arenaDimensions[1] 
        
        
        lineXCoord = np.linspace(0, self.canvasWidth, self.arenaDimensions[0]+1)
        lineYCoord = np.linspace(0, self.canvasHeight, self.arenaDimensions[1]+1)
                        
        for i in lineXCoord:
            w.canvasBoard.create_line(i,0,i,self.canvasHeight)

        for i in lineYCoord:
            w.canvasBoard.create_line(0,i,self.canvasWidth,i)
        return

    def remapCoord(self,x,y):
        remapX = x
        remapY = self.arenaDimensions[1]-1-y
        return remapX, remapY
        
    def getAgentBoundingBox(self,x,y):      
        bbX1 = (x+0.1)*self.xSqSide
        bbY1 = (y+0.25)*self.ySqSide
        bbX2 = bbX1+0.5*self.xSqSide
        bbY2 = bbY1+0.5*self.ySqSide
        return [bbX1,bbY1,bbX2,bbY2]

    def getLabelBoundingBox(self,x,y,labelI):  
        labelInc = np.minimum(0.2,(0.9/self.numLabels))    
        bbX1 = (x+0.7)*self.xSqSide
        bbY1 = (y+0.05+labelInc*labelI)*self.ySqSide
        bbX2 = bbX1+labelInc*self.xSqSide
        bbY2 = bbY1+labelInc*self.ySqSide
        return [bbX1,bbY1,bbX2,bbY2]
    
    def redrawDots(self):
        global w
        
        w.canvasBoard.delete(ALL)
        self.drawGrid()
        
        agentColor = deepcopy(self.agentColor)
        agentPos = self.envPos[:] + deepcopy(self.robotPos)
        
        while len(agentPos) != 0:
            if agentPos[0] != None:
                ind = [i for i, x in enumerate(agentPos) if x == agentPos[0]]
                agX, agY = self.remapCoord(agentPos[0][0], agentPos[0][1])
                agBB = self.getAgentBoundingBox(agX, agY)
                
                for i in xrange(len(ind)):
                    if len(ind) == 1:
                        w.canvasBoard.create_oval(agBB, fill=agentColor[i])
                    else:                        
                        w.canvasBoard.create_arc(agBB, start=(360/len(ind))*i, extent=360/len(ind), fill=agentColor[ind[i]]) 
                    
                agentColor = [i for j, i in enumerate(agentColor) if j not in ind]
                agentPos = [i for j, i in enumerate(agentPos) if j not in ind]
                
            else:
                del agentPos[0]
                del agentColor[0]
                           
        return
    
    def redrawLabelDots(self):
        for prop in self.stateLabels[self.currState].keys():
            if prop not in self.labelDisplayExcl:
                propIndex = self.labelIndex[prop]
                propColor = self.labelColor[propIndex]
                
                for lpos in self.stateLabels[self.currState][prop]:
                    pos = np.unravel_index(lpos,self.arenaDimensions)
                    x, y = self.remapCoord(pos[0], pos[1])
                    BB = self.getLabelBoundingBox(x, y, propIndex)
                    w.canvasBoard.create_oval(BB,fill=propColor)

    def windowResizeCallback(self, event):
        print "Window dimensions : ", event.width, event.height
        if self.filename != None:
            self.redrawAll()
        return        
        
if __name__=="__main__":
    myGuiState = guiState()
    pass
    
